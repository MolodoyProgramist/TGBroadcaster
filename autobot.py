import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = '7720559426:AAF35_mJcDWGdhRNPVX3kdvk_5adsEvQG2k'
API_ID = 23603493
API_HASH = '6de7be83325747a28538fa478faa60f1'
ADMIN_ID = 6080202170

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class Broadcast(StatesGroup):
    waiting_for_text = State()
    waiting_for_count = State()
    waiting_for_chat = State()

class Analyze(StatesGroup):
    waiting_for_chat = State()

# === –ö–Ω–æ–ø–∫–∏ ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
        [KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞")]
    ],
    resize_keyboard=True
)

cancel_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

# === üì¢ –†–∞—Å—Å—ã–ª–∫–∞ ===
@dp.message(lambda msg: msg.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=cancel_kb)
    await state.set_state(Broadcast.waiting_for_text)

@dp.message(Broadcast.waiting_for_text)
async def get_broadcast_text(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
        return

    await state.update_data(text=message.text)
    await message.answer("üî¢ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=cancel_kb)
    await state.set_state(Broadcast.waiting_for_count)

@dp.message(Broadcast.waiting_for_count)
async def get_broadcast_count(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
        return

    if not message.text.isdigit():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.", reply_markup=cancel_kb)
        return
    await state.update_data(count=int(message.text))
    await message.answer("üîó –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç (@chatname):", reply_markup=cancel_kb)
    await state.set_state(Broadcast.waiting_for_chat)

@dp.message(Broadcast.waiting_for_chat)
async def run_broadcast(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
        return

    data = await state.get_data()
    text = data["text"]
    count = data["count"]
    chat = message.text.strip()

    if not chat.startswith("@"):
        await message.answer("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.", reply_markup=cancel_kb)
        return

    await message.answer(f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –≤ {chat} –Ω–∞—á–∞–ª–∞—Å—å...", reply_markup=main_kb)

    client = TelegramClient("user_session", API_ID, API_HASH)

    try:
        await client.start()
    except SessionPasswordNeededError:
        await message.answer("üîê –í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–∞. –í–æ–π–¥–∏ –≤—Ä—É—á–Ω—É—é.")
        await state.clear()
        return

    try:
        entity = await client.get_entity(chat)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await client.disconnect()
        await state.clear()
        return

    success, fail = 0, 0
    for i in range(count):
        try:
            await client.send_message(entity, text)
            success += 1
        except Exception:
            fail += 1
        await asyncio.sleep(1.5)

    await client.disconnect()
    await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}", reply_markup=main_kb)
    await state.clear()

# === –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ ===
@dp.message(lambda msg: msg.text == "–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞")
async def analyze_chat_request(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return
    await message.answer("üì• –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç (@chatname):")
    await state.set_state(Analyze.waiting_for_chat)

@dp.message(Analyze.waiting_for_chat)
async def analyze_chat(message: types.Message, state: FSMContext):
    chat = message.text.strip()
    if not chat.startswith("@"):
        await message.answer("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
        return

    await message.answer("‚è≥ –°–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

    client = TelegramClient("user_session", API_ID, API_HASH)

    try:
        await client.start()
    except SessionPasswordNeededError:
        await message.answer("üîê –í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–∞.")
        await state.clear()
        return

    try:
        entity = await client.get_entity(chat)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await client.disconnect()
        await state.clear()
        return

    participants = []
    try:
        async for user in client.iter_participants(entity):
            participants.append(user)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ: {e}")
        await client.disconnect()
        await state.clear()
        return

    filename = f"users_{entity.id}.txt"
    with open(filename, "w", encoding="utf-8") as f:
        for user in participants:
            uname = f"@{user.username}" if user.username else "NoUsername"
            name = f"{user.first_name or ''} {user.last_name or ''}".strip()
            f.write(f"{uname} | {name} | ID: {user.id}\n")

    await client.disconnect()
    await message.answer_document(types.FSInputFile(filename), caption="‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    os.remove(filename)
    await state.clear()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
